{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","models/mock-pokemon.ts","services/pokemon-service.ts","components/loader.tsx","pages/pokemon-details.tsx","components/pokemon-card.tsx","components/pokemon-search.tsx","pages/pokemon-list.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","POKEMONS","id","name","hp","cp","picture","types","created","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","res","find","pokemon","undefined","method","body","JSON","stringify","headers","index","findIndex","filter","push","term","includes","Object","keys","length","console","process","Loader","className","PokemonsDetail","match","useState","setPokemon","useEffect","getPokemon","params","src","alt","style","width","margin","to","map","PokemonCard","borderColor","setColor","history","useHistory","onClick","onMouseEnter","onMouseLeave","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","PokemonList","getPokemons","position","bottom","right","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","isTypesValid","handleSubmit","preventDefault","newForm","isAddForm","startsWith","endsWith","test","validateForm","updatePokemon","addPokemon","onSubmit","deletePokemon","htmlFor","marginBottom","checked","disabled","concat","currentType","selectType","PokemonEdit","Pokemon","PokemonAdd","getTime","AuthenticationService","username","password","isAuthenticated","setTimeout","Login","message","setMessage","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f8fdb1fe.chunk.js","sourcesContent":["const formatDate=(date:Date = new Date()):string=>{\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\n}\n\nexport default formatDate;","const formatType = (type: string): string => {\n    let color: string;\n   \n    switch (type) {\n      case 'Feu': \n        color = 'red lighten-1'; \n        break; \n      case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n      case 'Plante': \n        color = 'green lighten-1'; \n        break; \n      case 'Insecte': \n        color = 'brown lighten-1'; \n        break; \n      case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n      case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n      case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n      case 'Fée': \n        color = 'pink lighten-4'; \n        break; \n      case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n      case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n      case 'Combat': \n        color = 'deep-orange'; \n        break; \n      default: \n        color = 'grey'; \n        break; \n    }\n   \n    return `chip ${color}`;\n  }\n\n  export default formatType","import Pokemon from './pokemon';\n   \nexport const POKEMONS: Pokemon[] = [\n {\n  id: 1,\n  name: \"Bulbizarre\",\n  hp: 25,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\n  types: [\"Plante\", \"Poison\"],\n  created: new Date()\n },\n {\n  id: 2,\n  name: \"Salamèche\",\n  hp: 28,\n  cp: 6,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\n  types: [\"Feu\"],\n  created: new Date()\n },\n {\n  id: 3,\n  name: \"Carapuce\",\n  hp: 21,\n  cp: 4,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\n  types: [\"Eau\"],\n  created: new Date()\n },\n {\n  id: 4,\n  name: \"Aspicot\",\n  hp: 16,\n  cp: 2,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\n  types: [\"Insecte\", \"Poison\"],\n  created: new Date()\n },\n {\n  id: 5,\n  name: \"Roucool\",\n  hp: 30,\n  cp: 7,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\n  types: [\"Normal\", \"Vol\"],\n  created: new Date()\n },\n {\n  id: 6,\n  name: \"Rattata\",\n  hp: 18,\n  cp: 6,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\n  types: [\"Normal\"],\n  created: new Date()\n },\n {\n  id: 7,\n  name: \"Piafabec\",\n  hp: 14,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\n  types: [\"Normal\", \"Vol\"],\n  created: new Date()\n },\n {\n  id: 8,\n  name: \"Abo\",\n  hp: 16,\n  cp: 4,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\n  types: [\"Poison\"],\n  created: new Date()\n },\n {\n  id: 9,\n  name: \"Pikachu\",\n  hp: 21,\n  cp: 7,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\n  types: [\"Electrik\"],\n  created: new Date()\n },\n {\n  id: 10,\n  name: \"Sabelette\",\n  hp: 19,\n  cp: 3,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\n  types: [\"Normal\"],\n  created: new Date()\n },\n {\n  id: 11,\n  name: \"Mélofée\",\n  hp: 25,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\n  types: [\"Fée\"],\n  created: new Date()\n },\n {\n  id: 12,\n  name: \"Groupix\",\n  hp: 17,\n  cp: 8,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\n  types: [\"Feu\"],\n  created: new Date()\n }\n];\n  \nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\nimport POKEMONS from \"../models/mock-pokemon\";\n\nexport default class PokemonService {\n\n  static pokemons:Pokemon[] = POKEMONS;\n\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\n\n  static getPokemons(): Promise<Pokemon[]> {\n    if(this.isDev) {\n      return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      resolve(this.pokemons);\n    });\n  }\n\n  static getPokemon(id: number): Promise<Pokemon|null> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n        let res=this.pokemons.find(pokemon => id === pokemon.id)\n\n      resolve(res===undefined ? null : res);\n    }); \n  }\n\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      const { id } = pokemon;\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n      this.pokemons[index] = pokemon;\n      resolve(pokemon);\n    }); \n  }\n\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n      const { id } = pokemon;\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n      resolve({});\n    }); \n  }\n\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    delete pokemon.created;\n\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons`, {\n        method: 'POST',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n      this.pokemons.push(pokemon);\n      resolve(pokemon);\n    }); \n  }\n\n  static searchPokemon(term: string): Promise<Pokemon[]> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n      resolve(results);\n    });\n\n  }\n\n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error: Error): void {\n    console.error(error);\n  }\n}","import React, { FunctionComponent } from 'react';\n\nconst Loader: FunctionComponent = () => {\n \n  return (\n    <div className=\"preloader-wrapper big active\"> \n      <div className=\"spinner-layer spinner-blue\"> \n        <div className=\"circle-clipper left\"> \n          <div className=\"circle\"></div> \n        </div>\n        <div className=\"gap-patch\"> \n          <div className=\"circle\"></div> \n        </div><div className=\"circle-clipper right\"> \n          <div className=\"circle\"></div> \n        </div>\n      </div> \n   </div> \n  );\n}\n \nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\n import PokemonService from '../services/pokemon-service' \nimport Loader from '../components/loader';\ntype Params = { id: string };\n  \nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    // POKEMONS.forEach(pokemon => {\n    //   if (match.params.id === pokemon.id.toString()) {\n    //     setPokemon(pokemon);\n    //   }\n    // fetch(`http://localhost:3001/pokemons/${match.params.id}`)\n    // .then(response=>response.json())\n    // .then((pokemon)=>{\n    //  if(pokemon.id) setPokemon(pokemon)\n    // })\n    PokemonService.getPokemon(+match.params.id).then(pokemon=>setPokemon(pokemon))\n\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn-floating halfway-fab waves-effect waves-light\">\n                  <i className=\"material-icons\">edit</i>\n                  </Link>\n\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de création</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader></Loader>  </h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent ,useState} from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css'\nimport formatDate from '../helpers/format-date'\nimport formatType from '../helpers/format-type'\nimport {useHistory} from 'react-router-dom'\nexport interface Props {\n    pokemon: Pokemon,\n    borderColor?:string\n  }\n\n  \n  const PokemonCard: FunctionComponent<Props> = ({pokemon,borderColor='#009688'}) => {\n    \n    const [color,setColor]=useState<string>()\n\n   \n    const  showBorder=()=>{\n        setColor(borderColor)\n    }\n\n    const hideBorder=()=>{\n        setColor('#f5f5f5')\n    }\n\n    const history=useHistory();\n\n    const goToPokemon=(id:number)=>{\n        history.push(`/pokemons/${id}`)\n    }\n    \n    return (\n      <div className=\"col s6 m4\" onClick={()=>goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\n        <div className=\"card horizontal\" style={{borderColor:color}}>\n          <div className=\"card-image\"> \n            <img src={pokemon.picture} alt={pokemon.name}/>\n          </div>\n          <div className=\"card-stacked\">\n            <div className=\"card-content\">\n              <p>{pokemon.name}</p>\n              <p><small>{formatDate(pokemon.created)}</small></p>\n              {/* <p><small>{pokemon.created.toString()}</small></p> */}\n              {pokemon.types.map(type=>(\n                  <span key={type} className={formatType(type)}>{type}</span>\n              ))}\n            </div>\n          </div>\n        </div> \n      </div>\n    );\n  }\n\nexport default PokemonCard;","import React, { FunctionComponent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\n\nconst PokemonSearch: FunctionComponent = () => {\n \n  const [term, setTerm] = useState<string>('');\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const term = e.target.value;\n    setTerm(term);\n\n    if(term.length <= 1) {\n      setPokemons([]);\n      return;\n    }\n\n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\n  }\n \n  return (\n    <div className=\"row\"> \n    <div className=\"col s12 m6 offset-m3\"> \n      <div className=\"card\"> \n      <div className=\"card-content\"> \n        <div className=\"input-field\"> \n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \n        </div> \n        <div className='collection'>\n        {pokemons.map((pokemon) => (\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\n            {pokemon.name}\n          </Link>\n        ))}\n        </div> \n      </div> \n      </div> \n    </div> \n    </div>\n  );\n}\n \nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/pokemon-service'  \nimport { Link } from 'react-router-dom';\nimport PokemonSearch from '../components/pokemon-search'\nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n    //setPokemons(POKEMONS);\n    // fetch('http://localhost:3001/pokemons/')\n    // .then(response=>response.json())\n    // .then((pokemons)=>{\n    //   setPokemons(pokemons)\n    // })\n    PokemonService.getPokemons().then(pokemons=>setPokemons(pokemons))\n  }, []);\n  \n\n\n\n\n  return (\n    <div>\n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n        <PokemonSearch />\n        {pokemons.map(pokemon => (\n          <PokemonCard key={pokemon.id} pokemon={pokemon} />\n        ))}\n        </div>\n      </div>\n      <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\n        style={{position: 'fixed', bottom: '25px', right: '25px'}}\n        to=\"/pokemons/add\">\n        <i className=\"material-icons\">add</i>\n      </Link>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner à l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n\ntype Props = {\n  pokemon: Pokemon,\n  isEditForm: boolean\n};\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\ntype Form = {\n  picture: Field,\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({\n    picture: { value: pokemon.picture },\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true }\n  });\n\n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const hasType = (type: string): boolean => {\n    return form.types.value.includes(type);\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.concat([type]);\n      newField = { value: newTypes };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      newField = { value: newTypes };\n    }\n\n    setForm({...form, ...{ types: newField }});\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form;\n\n    // Validator url\n    if(isAddForm()) {\n\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n      const end = \".png\";\n\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n        const errorMsg: string = 'L\\'url n\\'est pas valide.';\n        const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\n        newForm = { ...newForm, ...{ picture: newField } };\n      } else {\n        const newField: Field = { value: form.picture.value, error: '', isValid: true };\n        newForm = { ...newForm, ...{ picture: newField } };\n      }\n    }\n\n    // Validator name\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n    \n    // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n    if (form.types.value.length >= 3 && !hasType(type)) { \n      return false; \n    } \n    \n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid) {\n      pokemon.picture = form.picture.value;\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      isEditForm ? updatePokemon() : addPokemon();\n    }\n  }\n\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n  }\n\n  const isAddForm = (): boolean => {\n    return !isEditForm;\n  }\n\n  const addPokemon = () => {\n    PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons`));\n  }\n\n  const updatePokemon = () => {\n    PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            {isEditForm && (\n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n              <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n              </span>\n            </div>\n            )}\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon picture */}\n                {isAddForm() && (\n                  <div className=\"form-group\">\n                    <label htmlFor=\"picture\">Image</label>\n                    <input id=\"picture\" type=\"text\" name=\"picture\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                    {/* error */}\n                    {form.picture.error &&\n                      <div className=\"card-panel red accent-1\"> \n                    {form.picture.error} \n                  </div>} \n                </div>\n                )}\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" type=\"text\" name=\"name\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.name.error} \n                  </div>} \n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" type=\"number\" name=\"hp\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.hp.error}\n                  </div>} \n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" type=\"number\" name=\"cp\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.cp.error}\n                  </div>} \n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" name=\"types\" className=\"filled-in\" value={type} checked={hasType(type)} disabled={!isTypesValid(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\n import PokemonService from '../services/pokemon-service';\ntype Params = { id: string };\n  \nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    // POKEMONS.forEach(pokemon => {\n    //   if (match.params.id === pokemon.id.toString()) {\n    //     setPokemon(pokemon);\n    //   }\n    // // })\n    // fetch(`http://localhost:3001/pokemons/${match.params.id}`)\n    // .then(response=>response.json())\n    // .then((pokemon)=>{\n    //  if(pokemon.id) setPokemon(pokemon)\n    // })\n    PokemonService.getPokemon(+match.params.id).then(pokemon=>setPokemon(pokemon))\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","export default class Pokemon {\n    // 1. Typage des propiétés d'un pokémon.\n    id: number;\n    hp: number;\n    cp: number;\n    name: string;\n    picture: string;\n    types: Array<string>;\n    created?: Date;\n     \n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\n    constructor(\n     id: number,\n     hp: number = 100,\n     cp: number = 10,\n     name: string = '...',\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\n     types: Array<string> = ['Normal'],\n     created: Date = new Date()\n    ) {\n     // 3. Initialisation des propiétés d'un pokémons.\n     this.id = id;\n     this.hp = hp;\n     this.cp = cp;\n     this.name = name;\n     this.picture = picture;\n     this.types = types;\n     this.created = created;\n    }\n   }","import React, { FunctionComponent, useState } from 'react';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\n \nconst PokemonAdd: FunctionComponent = () => {\n\n  const [id] = useState<number>(new Date().getTime());\n  const [pokemon] = useState<Pokemon>(new Pokemon(id));\n   \n  return (\n    <div className=\"row\">\n      <h2 className=\"header center\">Ajouter un pokémon</h2>\n      <PokemonForm pokemon={pokemon}  isEditForm={false}></PokemonForm>\n    </div>\n  );\n}\n \nexport default PokemonAdd;","export default class AuthenticationService {\n\n    static isAuthenticated:boolean = false;\n  \n    static login(username: string, password: string): Promise<boolean> {\n      const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\n  \n      return new Promise(resolve => {\n        setTimeout(() => {\n          this.isAuthenticated = isAuthenticated;\n          resolve(isAuthenticated);\n        }, 1000);\n      });\n    }\n  }","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthenticationService from '../services/authentication-service';\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\ntype Form = {\n  username: Field,\n  password: Field\n}\n\nconst Login: FunctionComponent = () => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({\n    username: { value: '' },\n    password: { value: '' },\n  });\n\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form;\n\n    // Validator username\n    if(form.username.value.length < 3) {\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ username: newField } };\n    } else {\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ username: newField } };\n    }\n\n    // Validator password\n    if(form.password.value.length < 6) {\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ password: newField } };\n    } else {\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ password: newField } };\n    }\n\n    setForm(newForm);\n\n    return newForm.username.isValid && newForm.password.isValid;\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid) {\n      setMessage('👉 Tentative de connexion en cours ...');\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\n        if(!isAuthenticated) {\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\n          return;\n        }\n        \n        history.push('/pokemons');\n        \n      });\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Form message */}\n                {message && <div className=\"form-group\">\n                  <div className=\"card-panel grey lighten-5\">\n                    {message}\n                  </div>\n                </div>}\n                {/* Field username */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Identifiant</label>\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.username.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.username.error} \n                  </div>} \n                </div>\n                {/* Field password */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Mot de passe</label>\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.password.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.password.error} \n                  </div>} \n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n \nexport default Login;\n","\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './services/authentication-service';\n\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n  <Route {...rest} render={(props) => {\n    const isAuthenticated = AuthenticationService.isAuthenticated;\n    if (!isAuthenticated) {    \n      return <Redirect to={{ pathname: '/login' }} />\n    }\n\n    return <Component {...props} />\n  }} />\n);\n\nexport default PrivateRoute;","import React,{FunctionComponent,useEffect,useState} from 'react';\nimport { Link, BrowserRouter as Router, Switch,Route } from 'react-router-dom';\nimport PokemonsDetail from './pages/pokemon-details';\nimport PokemonList from './pages/pokemon-list';\nimport PageNotFound from './pages/page-not-found'\nimport PokemonEdit from './pages/pokemon-edit'\nimport PokemonAdd from './pages/pokemon-add'\nimport Login from './pages/login';\nimport PrivateRoute from './PrivateRoute';\nconst App: FunctionComponent= () => {\n// const[name]=useState<String>('hachem')\n// const[pokemons,setPokemons]=useState<Pokemon[]>([])\n\n\n// useEffect(()=>{\n//     setPokemons(POKEMONS)\n// },[])\n\n\n return (\n     <>\n  {/* <h1>Hello, {name} !</h1>\n  <h3>{pokemons.length}</h3> */}\n  {/* <h3>{JSON.stringify(pokemons)}</h3> */}\n\n{/* <PokemonList></PokemonList> */}\n  <Router>\n      <div>\n          {/* La barre de navigation */}\n          <nav>\n              <div className='nav-wrapper teal'>\n                  <Link to='/' className='brand-logo center'>Pokédéx</Link>\n              </div>\n          </nav>\n          {/* le systèm de gestion des routes de  notre application*/ }\n            <Switch>\n                <PrivateRoute exact path='/' component={PokemonList} />\n                <Route exact path=\"/login\" component={Login} />\n                <PrivateRoute exact path='/pokemons' component={PokemonList} />\n                <PrivateRoute exact path='/pokemons/add' component={PokemonAdd} />\n                <PrivateRoute exact path='/pokemons/edit/:id' component={PokemonEdit} />\n                <PrivateRoute exact path='/pokemons/:id' component={PokemonsDetail} />\n                <PrivateRoute component={PageNotFound} />\n            </Switch>\n\n\n      </div>\n  </Router>\n  </>\n )\n}\n\n  \nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from  './App'\n\nReactDOM.render(\n\n    <App></App>,\n    document.getElementById('root')\n)"],"sourceRoot":""}